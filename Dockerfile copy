# Use Ubuntu 20.04 LTS as the base image
FROM ubuntu:20.04

LABEL maintainer="Jonathan Joseph <josephj7@uw.edu>"

# Disable interactive prompts for apt-get
ENV DEBIAN_FRONTEND=noninteractive

# Install system packages and dependencies
RUN apt-get update -qq && apt-get install -y \
    curl \
    dpkg \
    dos2unix \
    git \
    graphviz \
    make \
    pandoc \
    pandoc-citeproc \
    python3 \
    python3-pip \
    python3-venv \
    python3-tk \
    r-base \
    r-base-dev \
    vim \
    wget \
    openjdk-11-jdk \
    tini \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel packaging

 # Install docutils first
 RUN pip3 install --no-cache-dir --ignore-installed "docutils>=0.18"
 
 # Then install other packages one (or a few) at a time
 RUN pip3 install --no-cache-dir --ignore-installed click
 RUN pip3 install --no-cache-dir --ignore-installed ipython
 RUN pip3 install --no-cache-dir --ignore-installed jinja2
 RUN pip3 install --no-cache-dir --ignore-installed jupyter
 RUN pip3 install --no-cache-dir --ignore-installed matplotlib
 RUN pip3 install --no-cache-dir --ignore-installed notebook
 RUN pip3 install --no-cache-dir --ignore-installed numpy
 RUN pip3 install --no-cache-dir --ignore-installed openpyxl
 RUN pip3 install --no-cache-dir --ignore-installed pandas
 RUN pip3 install --no-cache-dir --ignore-installed pytest
 RUN pip3 install --no-cache-dir --ignore-installed pyyaml
 RUN pip3 install --no-cache-dir --ignore-installed rpy2
 RUN pip3 install --no-cache-dir --ignore-installed scikit-learn
 RUN pip3 install --no-cache-dir --ignore-installed scipy
 RUN pip3 install --no-cache-dir --ignore-installed seaborn
 RUN pip3 install --no-cache-dir --ignore-installed sphinx
 RUN pip3 install --no-cache-dir --ignore-installed statsmodels
 RUN pip3 install --no-cache-dir --ignore-installed xlrd
 RUN rm -rf /root/.cache && \
 find /usr/local/lib/python3*/dist-packages/ -depth -type d -name __pycache__ -exec rm -rf '{}' +
# Set the InSilicoVA version (from CRAN archive)
ARG INSILICOVA_VERSION=	1.4.0


RUN echo "deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/" >> /etc/apt/sources.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys '51716619E084DAB9'
# Configure Java for R and install R packages including InSilicoVA
# 1. 创建 Java 的符号链接（将 java-11-openjdk 设置为默认的 Java 环境）
RUN ln -s /usr/lib/jvm/java-11-openjdk-amd64 /usr/lib/jvm/default-java

# 2. 运行 R 的 Java 配置命令
RUN R CMD javareconf

# 3. 将 rJava 所需的 Java server 目录路径写入动态链接库配置文件
RUN echo "/usr/lib/jvm/java-11-openjdk-amd64/lib/server/" > /etc/ld.so.conf.d/rJava.conf

# 4. 更新动态链接器缓存
RUN /sbin/ldconfig

# 5. 安装 R 包（包括 rJava、coda、waldo、gtable 和 ggplot2）
RUN R -q -e "install.packages(c('rJava','coda','waldo','gtable','ggplot2'), repos='http://cran.us.r-project.org', dependencies=TRUE)"

RUN R -e "install.packages('ggplot2', repos='http://cran.us.r-project.org', dependencies=TRUE)"
RUN R -e "print(.libPaths())"

RUN wget "https://cran.r-project.org/src/contrib/InterVA5_1.1.3.tar.gz"
RUN R CMD INSTALL "InterVA5_1.1.3.tar.gz"


# 6. 下载指定版本的 InSilicoVA 包（注意环境变量 INSILICOVA_VERSION 必须已定义）
RUN wget "https://cran.r-project.org/src/contrib/Archive/InSilicoVA/InSilicoVA_1.3.5.tar.gz"

# 7. 安装下载的 InSilicoVA 包
RUN R CMD INSTALL "InSilicoVA_1.3.5.tar.gz"

# # 8. 删除下载的 tar.gz 文件，清理工作区
# RUN rm "InSilicoVA_${INSILICOVA_VERSION}.tar.gz"

# # 9. 删除临时文件夹和临时 .rds 文件
# RUN rm -rf /tmp/downloaded_packages/ /tmp/*.rds
# # Define a volume for /home so that code/data can be mounted
# VOLUME ["/home"]

# # Configure matplotlib to use the Agg backend (to avoid GUI errors),
# # create a python symlink, and add an alias for launching Jupyter Notebook
# RUN sed -i "s/backend\s*:.*TkAgg/backend: Agg/" /usr/local/lib/python3*/dist-packages/matplotlib/mpl-data/matplotlibrc && \
#     ln -s /usr/bin/python3 /usr/local/bin/python && \
#     echo "alias notebook='jupyter notebook --ip=0.0.0.0 --no-browser --allow-root'" >> /etc/bash.bashrc

# # Expose port 8888 for Jupyter Notebook access
# EXPOSE 8888

# # Set the working directory
# WORKDIR /home

# # Use Tini (installed via apt) as the entrypoint to handle signals properly
# ENTRYPOINT ["/usr/bin/tini", "--"]

# # Start a bash shell by default
# CMD ["/bin/bash"]